Разделение на контексты
=======================

Услуги клиентам
Основной блок, в котором сгруппированы все команды, относящиеся к услугам.
Менеджер управляет наполнением услуг. Клиент и воркер работают с заявками.
Тут же реализован весь цикл работы с заявкой от клиента - все изменения статусов и проверки на дедлайны.

Ставки - совсем отдельная история, которая никак не влияет на другие компоненты системы, только читает данные из других систем.
При вынесении в отдельный компонент может быть в любой момент полностью удалена в случае проверки из налоговой, что снижает риски компании.

Вакансии. Для работы из других систем нужны только аккаунты менеджера и воркеров. Хорошо изолированная подсистема со своей бизнес логикой и требованиями.
При наличии требования держать нагрузку при откликах на вакансии такую подсистему проще сделать надежной с вынесением в отдельный сервис и масштабируя по необходимости.

Выплаты и списания.
Для выставления счетов и оплат воркерам нужна информация о заказах и статусах. Выделяется отдельно как работа с деньгами, но требует почти всех данных из основной системы с заказами.

Проверка качества. 
Для анализа того, что происходило с заказом, требует почти всех данных из основной системы с заказами. Однако выделяется как логический компонент работы с одной фиче (качество заказа)

Работа склада.
Для сбора заказов и взаимодействия с воркерами опять потребуется почти все про заказ. Но все же логически выделяется так как там все про физическую сборку заказа и работу склада.
 

Разделение на сервисы
=====================

Ставки и подбор клиентов на вакансии решено вынести в отдельные сервисы.
Ставки как высокорискованный сервис, хорошая фича - быстро все удалить. 
Безусловно фича додуманная мной, но для бизнеса кажется это вполне мог бы быть резонный аргумент.
Вакансии как сервис с требованием выдерживать ddos и высокую нагрузку. Сервис очень слабо связан с другими компонентами системы, для обмена нужны только данные об аккаунтах.

Все остальное решено делать внутри одного сервиса.
* не ожидается высокая нагрузка
* есть требования к низкому ttm
* присутствует высокая связность данных. данные нужно сильно дублировать при разделении подсистем на микросервисы.

Для авторизации между сервисами должны быть синхронные взаимодействия. Все остальные взаимодействия должны быть асинхронными через стриминг данных.

Спорные части:
Вынесение склада, выплат и качества в микросервисы. Очень дорогая разработка. Не понятно, будет ли расти количество фич.
